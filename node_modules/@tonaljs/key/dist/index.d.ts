export interface Key {
    type: "major" | "minor";
    tonic: string;
    alteration: number;
    keySignature: string;
}
interface KeyScale {
    tonic: string;
    grades: string[];
    intervals: string[];
    scale: string[];
    chords: string[];
    chordsHarmonicFunction: string[];
    chordScales: string[];
}
export interface MajorKey extends Key, KeyScale {
    type: "major";
    minorRelative: string;
    scale: string[];
    secondaryDominants: string[];
    secondaryDominantsMinorRelative: string[];
    substituteDominants: string[];
    substituteDominantsMinorRelative: string[];
}
export interface MinorKey extends Key {
    type: "minor";
    relativeMajor: string;
    natural: KeyScale;
    harmonic: KeyScale;
    melodic: KeyScale;
}
/**
 * Get a major key properties in a given tonic
 * @param tonic
 */
export declare function majorKey(tonic: string): MajorKey;
/**
 * Get minor key properties in a given tonic
 * @param tonic
 */
export declare function minorKey(tonic: string): MinorKey;
/**
 * Given a key signature, returns the tonic of the major key
 * @param sigature
 * @example
 * majorTonicFromKeySignature('###') // => 'A'
 */
export declare function majorTonicFromKeySignature(sig: string | number): string | null;
declare const _default: {
    majorKey: typeof majorKey;
    majorTonicFromKeySignature: typeof majorTonicFromKeySignature;
    minorKey: typeof minorKey;
};
export default _default;
